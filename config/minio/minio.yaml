apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: minio
  name: minio
spec:
  replicas: 1
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      containers:
        - command:
            - /bin/sh
            - -ce
            - /usr/bin/docker-entrypoint.sh minio -S /etc/minio/certs/ server --console-address :9001 /export
          env:
            - name: MINIO_ROOT_USER
              value: "argoproj"
            - name: MINIO_ROOT_PASSWORD
              value: "sup3rs3cr3tp4ssw0rd1"
            - name: MINIO_BROWSER_LOGIN_ANIMATION
              value: "off"
          image: minio/minio
          imagePullPolicy: Always
          name: minio
          ports:
            - containerPort: 9000
              name: http
              protocol: TCP
            - containerPort: 9001
              name: console
              protocol: TCP
          resources:
            requests:
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
---
apiVersion: v1
stringData:
  accesskey: argoproj
  secretkey: sup3rs3cr3tp4ssw0rd1
kind: Secret
metadata:
  name: my-minio-cred
  labels:
    app: minio
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  name: minio
  labels:
    app: minio
spec:
  selector:
    app: minio
  ports:
    - port: 9000
      name: api
      protocol: TCP
      targetPort: 9000
    - port: 9001
      name: dashboard
      protocol: TCP
      targetPort: 9001

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: minio-job-cluster-role
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - list
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/created-by: argoproj
  name: minio-job-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: minio-job-cluster-role
subjects:
  - kind: ServiceAccount
    name: minio-job
    namespace: argo
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: minio-config
  labels:
    app: minio-job
data:
  initialize: |-
    #!/bin/sh
    set -e ; # Have script exit in the event of a failed command.
    MC_CONFIG_DIR="/etc/minio/mc/"
    MC="/usr/bin/mc --insecure --config-dir ${MC_CONFIG_DIR}"

    # connectToMinio
    # Use a check-sleep-check loop to wait for Minio service to be available
    connectToMinio() {
      SCHEME=$1
      ATTEMPTS=0 ; LIMIT=29 ; # Allow 30 attempts
      set -e ; # fail if we can't read the keys.
      ACCESS=argoproj ; SECRET=sup3rs3cr3tp4ssw0rd1 ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to Minio server: $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="${MC} alias set myminio $SCHEME://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS = 0 ]
      do
        ATTEMPTS=`expr $ATTEMPTS + 1` ;
        echo \"Failed attempts: $ATTEMPTS\" ;
        if [ $ATTEMPTS -gt $LIMIT ]; then
          exit 1 ;
        fi ;
        sleep 2 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }

    # checkBucketExists ($bucket)
    # Check if the bucket exists, by using the exit code of `mc ls`
    checkBucketExists() {
      BUCKET=$1
      CMD=$(${MC} ls myminio/$BUCKET > /dev/null 2>&1)
      return $?
    }

    # createBucket ($bucket, $policy, $purge)
    # Ensure bucket exists, purging if asked to
    createBucket() {
      BUCKET=$1
      POLICY=$2
      PURGE=$3
      VERSIONING=$4

      # Purge the bucket, if set & exists
      # Since PURGE is user input, check explicitly for `true`
      if [ $PURGE = true ]; then
        if checkBucketExists $BUCKET ; then
          echo "Purging bucket '$BUCKET'."
          set +e ; # don't exit if this fails
          ${MC} rm -r --force myminio/$BUCKET
          set -e ; # reset `e` as active
        else
          echo "Bucket '$BUCKET' does not exist, skipping purge."
        fi
      fi

      # Create the bucket if it does not exist
      if ! checkBucketExists $BUCKET ; then
        echo "Creating bucket '$BUCKET'"
        ${MC} mb myminio/$BUCKET
      else
        echo "Bucket '$BUCKET' already exists."
      fi


      # set versioning for bucket
      if [ ! -z $VERSIONING ] ; then
        if [ $VERSIONING = true ] ; then
            echo "Enabling versioning for '$BUCKET'"
            ${MC} version enable myminio/$BUCKET
        elif [ $VERSIONING = false ] ; then
            echo "Suspending versioning for '$BUCKET'"
            ${MC} version suspend myminio/$BUCKET
        fi
      else
          echo "Bucket '$BUCKET' versioning unchanged."
      fi

      # At this point, the bucket should exist, skip checking for existence
      # Set policy on the bucket
      echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
      ${MC} anonymous set $POLICY myminio/$BUCKET
    }

    # Try connecting to Minio instance
    scheme=http
    connectToMinio $scheme
    # Create the buckets
    createBucket argoproj public false false
    createBucket workflows public false true
---
apiVersion: batch/v1
kind: Job
metadata:
  name: minio-job
  labels:
    app: minio-job
spec:
  activeDeadlineSeconds: 600
  backoffLimit: 2
  template:
    metadata:
      labels:
        app: minio-job
    spec:
      restartPolicy: OnFailure
      volumes:
        - name: minio-configuration
          projected:
            sources:
              - configMap:
                  name: minio-config
      serviceAccountName: minio-job
      containers:
        - name: minio-mc
          image: "minio/mc"
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "/config/initialize"]
          env:
            - name: MINIO_ENDPOINT
              value: minio
            - name: MINIO_PORT
              value: "9000"
          volumeMounts:
            - name: minio-configuration
              mountPath: /config
          resources:
            requests:
              memory: 128Mi
      initContainers:
        - name: waitforminio
          image: groundnuty/k8s-wait-for:v2.0
          resources:
            requests:
              cpu: 10m
              memory: 64Mi
          args:
            - "pod"
            - "-lapp=minio"
            - "-n argo"
---
apiVersion: v1
kind: Secret
metadata:
  name: minio-job-sa
  annotations:
    kubernetes.io/service-account.name: minio-job
type: kubernetes.io/service-account-token
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: minio-job
secrets:
  - name: minio-job-sa
